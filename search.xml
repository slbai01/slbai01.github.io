<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LSF作业管理系统提交job array</title>
    <url>/2020/12/07/LSF-job-array/</url>
    <content><![CDATA[<p>以 jobarray 方式提交任务便于进行任务管理，核心是利用<code>LSB_JOBINDEX</code>，比如<code>canu</code>大量使用了job array进行任务提交：</p>
<ol>
<li>减少作业管理系统调度工作</li>
<li>方便后续任务依赖</li>
<li>设置略微复杂，但可以接受</li>
</ol>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Example1</span></span><br><span class="line">for x in `seq 1 7`; do # 按染色体去冗余</span><br><span class="line">    echo &quot;grep \&quot;^chr$&#123;x&#125;D\&quot; *tsv | cut -d &#x27;:&#x27; -f 2 | sort -k2n | uniq &gt; merge.chr$&#123;x&#125;D_depth0.tsv&quot;</span><br><span class="line">done &gt; redup.sh</span><br><span class="line">bsub -J &quot;testjob[1-7]&quot; -q rock -n 1 -R &quot;span[hosts=1]&quot; &quot;awk -v jindex=\$LSB_JOBINDEX &#x27;NR==jindex&#x27; redup.sh | bash&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example2</span></span><br><span class="line">module load BamDeal/0.24</span><br><span class="line">bsubt &quot;mkdir split_bam; BamDeal modify bamSplit -l round1.fofn -o split_bam;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改输入文件格式为数字</span></span><br><span class="line">jobid=0</span><br><span class="line">for x in `ls split_bam/*`; do</span><br><span class="line">  jobid=$(($jobid+1))</span><br><span class="line">  echo -e &quot;$jobid\t $x&quot; &gt;&gt; split_bam/correspond.txt</span><br><span class="line">  mv $x split_bam/$jobid.bam</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">bsubt -J &quot;index[1-$jobid]&quot; pbindex split_bam/\$&#123;LSB_JOBINDEX&#125;.bam</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://scicomp.ethz.ch/wiki/Job_arrays">ref_link1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux进阶</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>作业管理系统</tag>
        <tag>LSF</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS GitHub+Hexo 搭建个人网站</title>
    <url>/2020/12/05/MacOS-GitHub-Hexo-build-self-blog/</url>
    <content><![CDATA[<h2 id="1-Quick-publish-blog"><a href="#1-Quick-publish-blog" class="headerlink" title="1. Quick publish blog"></a>1. Quick publish blog</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-安装-git-node-npm-hexo"><a href="#2-安装-git-node-npm-hexo" class="headerlink" title="2. 安装 git/node/npm/hexo"></a>2. 安装 git/node/npm/hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install npm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 hexo 并 初始化</span></span></span><br><span class="line">mkdir /Users/slbai/Documents/git_local/MyBlog</span><br><span class="line">cd /Users/slbai/Documents/git_local/MyBlog</span><br><span class="line"></span><br><span class="line">npm --registry https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line">npm --registry https://registry.npm.taobao.org install hexo-deployer-git</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更换hexo主题</span></span></span><br><span class="line">git clone https://github.com/sun11/hexo-theme-paperbox.git themes/hexo-theme-paperbox</span><br><span class="line"></span><br><span class="line">修改 _config.yml 文件101行 theme: hexo-theme-paperbox</span><br></pre></td></tr></table></figure>

<h2 id="3-本地部署并预览"><a href="#3-本地部署并预览" class="headerlink" title="3. 本地部署并预览"></a>3. 本地部署并预览</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+C 终止预览</span></span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可预览</p>
<h2 id="4-配置GitHub"><a href="#4-配置GitHub" class="headerlink" title="4. 配置GitHub"></a>4. 配置GitHub</h2><ul>
<li>建立Repository</li>
</ul>
<p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】<br>该步可参照<a href="https://jingyan.baidu.com/article/ed2a5d1f3732cb09f7be1745.html">百度经验</a></p>
<ul>
<li>配置SSH-Key</li>
</ul>
<p>该步可参照<a href="http://blog.csdn.net/binyao02123202/article/details/20130891">互联网资料</a></p>
<h2 id="5-部署到GitHub"><a href="#5-部署到GitHub" class="headerlink" title="5. 部署到GitHub"></a>5. 部署到GitHub</h2><p>部署到 Github 前需要配置 <code>_config.yml</code> 文件，首先找到下面的内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/slbai01/slbai01.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p>当部署完成后，访问<a href="slbai01.github.io">slbai01.github.io</a>站点，正常显示网页，表明部署成功。</p>
<h2 id="7-下次部署"><a href="#7-下次部署" class="headerlink" title="7. 下次部署"></a>7. 下次部署</h2><p>每次部署的步骤，可按以下三步来进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="8-Latex数学公式支持"><a href="#8-Latex数学公式支持" class="headerlink" title="8. Latex数学公式支持"></a>8. Latex数学公式支持</h2><p>默认支持Latex数学公式</p>
<p>使用时需在数学公式前后各添加两个<code>$</code>符号</p>
<p>示例:</p>
<p>$$dN = \frac{No.\ non-synonymous\ substitutions} {No.\ non-synonymous\ sites} = \frac {5}{8.417} = 0.176$$</p>
<p>公式内添加空格: 在空格前加‘\’符号即可，如上公式</p>
<h2 id="9-命令总结"><a href="#9-命令总结" class="headerlink" title="9. 命令总结"></a>9. 命令总结</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 常用命令</span></span><br><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复合命令：</span></span><br><span class="line">hexo deploy -g  #生成加部署</span><br><span class="line">hexo server -g  #生成加预览</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令简写：</span></span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<p>Reference：</p>
<blockquote>
<p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html">http://www.cnblogs.com/zhcncn/p/4097881.html</a><br><a href="http://www.jianshu.com/p/858ecf233db9">http://www.jianshu.com/p/858ecf233db9</a><br>提交sitemap：<br><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/</a><br><a href="http://fionat.github.io/2016/04/02/sitemap/">http://fionat.github.io/2016/04/02/sitemap/</a><br><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/hexo-tutor-7.html">https://wizardforcel.gitbooks.io/markdown-simple-world/hexo-tutor-7.html</a><br>主题优化：<br><a href="http://www.voidking.com/2015/05/31/deve-hexo-theme-optimize/">http://www.voidking.com/2015/05/31/deve-hexo-theme-optimize/</a><br>博客摘要：<br><a href="https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/">https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</a><br>Next主题设置：<br><a href="http://blog.csdn.net/lemonxq/article/details/72676005">http://blog.csdn.net/lemonxq/article/details/72676005</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>博客搭建</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>文献引用格式设置</title>
    <url>/2020/12/13/article-reference-format/</url>
    <content><![CDATA[<ol>
<li>冒号<code>:</code>后首字母大写</li>
<li>基因名斜体</li>
<li>设置引用文献题目拉丁名斜体或上下标（以<code>Mendeley</code>为例）<ol>
<li>斜体：在需要为斜体的单词两侧分别加上<code>&lt;i&gt;</code>和<code>&lt;/i&gt;</code></li>
<li><code>&lt;sup&gt;上标&lt;/sup&gt;</code></li>
<li><code>&lt;sub&gt;下标&lt;/sub&gt;</code></li>
</ol>
</li>
</ol>
<a id="more"></a>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>文献管理</tag>
      </tags>
  </entry>
  <entry>
    <title>自动备份博客源文件</title>
    <url>/2020/12/22/auto-backup-blog-sourcefile/</url>
    <content><![CDATA[<p>非原创！原文转载出处：</p>
<blockquote>
<p><a href="https://blog.csdn.net/wugenqiang/article/details/89206860">自动备份Hexo博客源文件</a></p>
</blockquote>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>自从接触了<code>Hexo+NexT</code>之后，发现离不开了，以后有能力的时候一定重新架构一下，使得更加个性化，最大程度的满足我们对于软件的需求，大家都知道，如果写东西在本地的话，最怕的应该就是更换电脑，还要重新搭建博客了，所以备份对于我们来说特别重要！备份博客就是本篇博客文章的主旨了，一定要攻下这座城堡。<br>我曾经看过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于我这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。你说是不是，所以这篇文章出现了……</p>
<a id="more"></a>


<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>通过监听Hexo的事件来完成自动执行Git命令进行自动备份，查阅<a href="https://hexo.io/zh-cn/api/events.html">Hexo文档</a>，找到了Hexo的主要事件，见下表：</p>
<table>
<thead>
<tr>
<th>事件名</th>
<th>事件发生时间</th>
</tr>
</thead>
<tbody><tr>
<td>deployBefore</td>
<td>在部署完成前发布</td>
</tr>
<tr>
<td>deployAfter</td>
<td>在部署成功后发布</td>
</tr>
<tr>
<td>exit</td>
<td>在 Hexo 结束前发布</td>
</tr>
<tr>
<td>generateBefore</td>
<td>在静态文件生成前发布</td>
</tr>
<tr>
<td>generateAfter</td>
<td>在静态文件生成后发布</td>
</tr>
<tr>
<td>new</td>
<td>在文章文件建立后发布</td>
</tr>
</tbody></table>
<p>于是我们就可以通过监听Hexo的<code>deployAfter</code>事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>
<p>三、实现</p>
<p>1.将Hexo目录加入Git仓库<br>本脚本需要提前将Hexo加入Git仓库并与Github或者Gitee远程仓库绑定之后，才能正常工作。如果你不知道该怎样进行操作，可以参考我的另一篇博文：<br><a href="https://wugenqiang.gitee.io/articles/manual_backup_blog_source_files.html">Git命令手动备份Hexo博客源文件</a></p>
<p>2.安装shelljs模块<br>要实现这个自动备份功能，需要依赖NodeJs的一个shelljs模块,该模块重新包装了child_process,调用系统命令更加的方便。（其实就是因为我懒( ╯▽╰)）该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成shelljs模块的安装：</p>
<p><code>npm install --save shelljs</code></p>
<p>3.编写自动备份脚本<br>shelljs模块安装完成后，在Hexo根目录的scripts文件夹下新建一个js文件，文件名随意取(我的文件名为:<code>auto_backup.js</code>)。如果没有scripts目录，请新建一个。</p>
<p>然后在脚本中，写入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;shelljs/global&#x27;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    hexo.on(<span class="string">&#x27;deployAfter&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当deploy完成后执行备份</span></span><br><span class="line">        run();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;产生了一个错误啊&lt;(￣3￣)&gt; !，错误详情为：&quot;</span> + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!which(<span class="string">&#x27;git&#x27;</span>)) &#123;</span><br><span class="line">        echo(<span class="string">&#x27;Sorry, this script requires git&#x27;</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo(<span class="string">&quot;======================Auto Backup Begin===========================&quot;</span>);</span><br><span class="line">        cd(<span class="string">&#x27;E:/work/myblog&#x27;</span>);    <span class="comment">//此处修改为Hexo根目录路径</span></span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">&#x27;git add --all&#x27;</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">&#x27;Error: Git add failed&#x27;</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">&#x27;git commit -am &quot;blog auto backup script\&#x27;s commit&quot;&#x27;</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">&#x27;Error: Git commit failed&#x27;</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exec(<span class="string">&#x27;git push origin master&#x27;</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">            echo(<span class="string">&#x27;Error: Git push failed&#x27;</span>);</span><br><span class="line">            exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        echo(<span class="string">&quot;==================Auto Backup Complete============================&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，需要修改第16行的<code>E:/work/myblog</code>路径为<code>Hexo</code>的根目录路径。（脚本中的路径为博主的Hexo路径）</p>
<p>如果你的Git远程仓库名称不为origin的话，还需要修改第25行执行的push命令，修改成自己的远程仓库名和相应的分支名。</p>
<p>4.测试结果<br>保存脚本并退出，然后执行hexo d命令，在常规结果执行出来后，将会得到类似以下结果:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">======================Auto Backup Begin===========================</span><br><span class="line">[master 442d64b] blog auto backup script&#x27;s commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 scripts/.Rhistory</span><br><span class="line">To https://github.com/slbai01/myblog-source.git</span><br><span class="line">   47806cf..442d64b  master -&gt; master</span><br><span class="line">==================Auto Backup Complete============================</span><br></pre></td></tr></table></figure>

<p>这样子就表明成功上传啦，每次更新博文并deploy到服务器上之后，备份就自动启动并完成备份啦~</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>文献追踪常用工具-2020版</title>
    <url>/2020/12/22/new-article-tracking-tools-version2020/</url>
    <content><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>version 0.1: 2020-12-22 init version</p>
<h2 id="文献追踪"><a href="#文献追踪" class="headerlink" title="文献追踪"></a>文献追踪</h2><p>文献追踪的方法常包括以下几种：</p>
<ol>
<li>App/Web等追踪期刊更新</li>
<li>文献管理工具关键词追踪</li>
<li>定期在google/web of science等网站查询关键词</li>
<li>RSS追踪固定网页更新</li>
<li>优质公众号推送</li>
</ol>
<a id="more"></a>

<p>推荐一些本人正在使用的软件及方法：</p>
<ol>
<li><p><a href="http://ftracker.net/">ftracker</a><br>该网站可以自动翻译追踪文献题目（偶尔抽风无法自动翻译），但是关键词功能不如 <a href="https://www.storkapp.me/">stork</a>。<br>使用该网站追踪期刊更新。</p>
<ul>
<li>追踪文献列表如下：<br>Nature<br>Science<br>Cell<br>BRIEFINGS IN BIOINFORMATICS<br>BIOINFORMATICS<br>Nature Plants<br>Nature Communications<br>GENOME BIOLOGY<br>New Phytologist<br>Molecular Biology and Evolution<br>Nature Genetics<br>Proceedings of the National Academy of Sciences<br>BMC BIOINFORMATICS</li>
<li>追踪关键词：<br>IF&gt;=5.000; BIOLOGY; keywords=”rice”<br>IF&gt;=5.000; All Field; keywords=”genome assembly”<br>IF&gt;=3.000; All Field; keywords=”wheat”</li>
</ul>
</li>
<li><p><a href="https://www.storkapp.me/">stork</a><br>该网站关键词追踪较为准确。</p>
<ul>
<li>追踪关键词：<br>genome assembly<br>wheat</li>
</ul>
</li>
<li><p><a href="https://www.biorxiv.org/alerts">bioRxiv</a><br>追踪预印版文献，可设置关键词和追踪领域</p>
</li>
<li><p>植物科学相关优质公众号，按首字母排序（update: 2020-12-22）</p>
<ul>
<li>AraShare科技服务中心</li>
<li>BioArt</li>
<li>BioArt植物</li>
<li>测序中国</li>
<li>单细胞天地</li>
<li>eplants</li>
<li>Eric生信小班</li>
<li>碱基矿工</li>
<li>基预科技</li>
<li>莱肯生物</li>
<li>Mol Plant植物科学</li>
<li>PlantReports</li>
<li>生信阿拉丁</li>
<li>生信媛</li>
<li>生信修炼手册</li>
<li>小麦研究联盟</li>
<li>小麦时代WheatTimes</li>
<li>小麦基因组与遗传育种</li>
<li>植物科学最前沿</li>
<li>植物科学SCI</li>
<li>植物类SCI摘要</li>
<li>植物研究进展</li>
<li>植物基因组</li>
<li>植物生物技术Pbj</li>
<li>Continue…</li>
</ul>
</li>
<li><p>优质科普公众号，按首字母排序（update: 2020-12-22）</p>
<ul>
<li>把科学带回家</li>
<li>陈巍学基因</li>
<li>柴知道</li>
<li>返朴</li>
<li>环球科学</li>
<li>混知</li>
<li>SME科技故事</li>
<li>原理</li>
<li>知识分子</li>
<li>Continue…</li>
</ul>
</li>
<li><p>ios软件 <code>Read</code> 可以追踪期刊或关键词</p>
</li>
</ol>
<h2 id="文献下载"><a href="#文献下载" class="headerlink" title="文献下载"></a>文献下载</h2><p>所有文献均可免费获取补充材料，文章网页地址内均提供有下载链接。（Molecule Plant 最新发表的文章通常无法下载到附件）</p>
<ol>
<li>sci-hub <a href="https://wadauk.github.io/scihub_ck/index.html">可用域名检测</a>, <a href="http://sci-hub.tw/">常用域名</a></li>
<li>researchgate（需要相关作者上传文章信息）</li>
<li>图书馆购买了部分学术期刊的下载权限，登陆校园网后下载即可</li>
</ol>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>文献管理</tag>
      </tags>
  </entry>
  <entry>
    <title>基因组注释的基因结构核实</title>
    <url>/2020/12/29/check-gene-structure/</url>
    <content><![CDATA[<p>现阶段，大部分基因组的基因结构均为电子注释，未经过严格的手工矫正，准确度上有待考究。因此在进行基因功能研究前首先要综合各方面证据，对基因结构注释的准确度进行判别及修正，重点关注基因的起始/终止<strong>转录位点</strong>和起始/终止<strong>翻译位点</strong>。 翻译位点由于难以确定，因此以<strong>转录本最长</strong>作为主要原则</p>
<p>本教程主要采用以下三种证据：</p>
<ol>
<li>三代全长转录组 <code>hq.fa</code><br>优点：完整反应基因结构及可变剪切信息<br>缺点：a) 可用数据较少; b) 可能含有部分嵌合数据</li>
<li>二代转录组比对/二代转录组从头组装<br>优点：可用数据较多<br>缺点：a) reads组装过程会引入未知错误; b) 无法准确反映可变剪切</li>
<li>相同物种不同注释版本<br>优点：全基因组提供的注释往往结合了全方位的证据，且不同基因组版本通常为独立注释，可相互矫正<br>缺点：a) 使用范围窄，只有部分物种有多个版本的注释; b) 不同版本基因组注释时相互参考，存在注释污染的现象</li>
</ol>
<a id="more"></a>

<p>实际操作步骤中先结合<em>转录组/不同版本注释</em>信息确定最佳转录本，提取到的最佳转录本用于判定<strong>起始密码子位置</strong>放在最后一步。</p>
<h2 id="1-相同物种不同注释版本"><a href="#1-相同物种不同注释版本" class="headerlink" title="1. 相同物种不同注释版本"></a>1. 相同物种不同注释版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ref_genome=ref.fa</span><br><span class="line">cds_vx1=vx1.cds.fa</span><br><span class="line">thread=18</span><br><span class="line">prefix=vx1</span><br><span class="line">bsubt -q normalA -n $thread &quot;minimap2 -uf --split-prefix $prefix -ax splice:hq $ref_genome $cds_vx1 -t $thread | samtools sort -@ $thread --output-fmt BAM -o $prefix.minimap2.bam &amp;&amp; samtools index $prefix.minimap2.bam&quot;</span><br><span class="line"></span><br><span class="line">cds_vx2=vx2.cds.fa</span><br><span class="line">thread=18</span><br><span class="line">prefix=vx2</span><br><span class="line">bsubt -q normalA -n $thread &quot;minimap2 -uf --split-prefix $prefix -ax splice:hq $ref_genome $cds_vx2 -t $thread | samtools sort -@ $thread --output-fmt BAM -o $prefix.minimap2.bam &amp;&amp; samtools index $prefix.minimap2.bam&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-三代全长转录组数据证据"><a href="#2-三代全长转录组数据证据" class="headerlink" title="2. 三代全长转录组数据证据"></a>2. 三代全长转录组数据证据</h2><p>该证据主要提供基因结构信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">raw_bam=PacBio.xxxx.subreads.bam</span><br><span class="line"></span><br><span class="line">conda activate pbbioconda</span><br><span class="line">thread=36</span><br><span class="line">bsub -q rackB -n $thread -e lsf.err -o lsf.out -J isoseq -R &quot;span[hosts=1]&quot; ccs $raw_bam isoseq.ccs.bam -j $thread</span><br><span class="line"></span><br><span class="line">echo -e &quot;&gt;NEB_5p\nGCAATGAAGTCGCAGGGTTGGG\n&gt;Clontech_5p\nAAGCAGTGGTATCAACGCAGAGTACATGGGG\n&gt;NEB_Clontech_3p\nGTACTCTGCGTTGATACCACTGCTT&quot;  ./primers.fasta</span><br><span class="line">bsub -q rackB -n $thread -e lsf.err -o lsf.out -J lima -R &quot;span[hosts=1]&quot; lima isoseq.ccs.bam primers.fasta alz.fl.bam --isoseq --peek-guess</span><br><span class="line">bsub -q rackB -n $thread -e lsf.err -o lsf.out -J refine -R &quot;span[hosts=1]&quot; isoseq3 refine alz.fl.NEB_5p--NEB_Clontech_3p.bam primers.fasta alz.flnc.bam</span><br><span class="line">bsub -w 126206 -q rackB -n $thread -e lsf.err -o lsf.out -J cluster -R &quot;span[hosts=1]&quot; isoseq3 cluster alz.flnc.bam clustered.bam --verbose --use-qvs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比对到参考基因组</span></span><br><span class="line">publish_hq=clustered.hq.fasta.gz</span><br><span class="line">thread=18</span><br><span class="line">prefix=publish_hq</span><br><span class="line">bsubt -q normalA -n $thread &quot;minimap2 -uf --split-prefix $prefix -ax splice:hq $ref_genome $publish_hq -t $thread | samtools sort -@ $thread --output-fmt BAM -o $prefix.minimap2.bam &amp;&amp; samtools index $prefix.minimap2.bam&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-二代转录组数据处理"><a href="#3-二代转录组数据处理" class="headerlink" title="3. 二代转录组数据处理"></a>3. 二代转录组数据处理</h2><p>该证据主要提供起始密码子位置信息</p>
<ul>
<li>mapping至参考基因组看覆盖度 （一般情况下可查看物种对应的公共Jbrowse即可，本教程不在展开介绍）</li>
</ul>
<h3 id="3-1-无参组装"><a href="#3-1-无参组装" class="headerlink" title="3.1. 无参组装"></a>3.1. 无参组装</h3><ul>
<li>组装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> module load anaconda3/2020.02</span></span><br><span class="line">for x in `ls *_1.fq.gz`; do</span><br><span class="line">  read1=$x</span><br><span class="line">  read2=$(echo $x | sed &#x27;s/_1/_2/g&#x27;)</span><br><span class="line">  prefix=$(echo $x | sed &#x27;s/_1.fq.gz//g&#x27; | rev | cut -d &#x27;/&#x27; -f 1 | rev )</span><br><span class="line">  THREADS=18</span><br><span class="line">  MEM=40G</span><br><span class="line">  bsub -J trintity -q normalB -n $&#123;THREADS&#125; -e lsf.err -o lsf.out -R &quot;span[hosts=1]&quot; Trinity --seqType fq --max_memory $&#123;MEM&#125; --left $&#123;read1&#125; --right $&#123;read2&#125; --CPU $&#123;THREADS&#125; --output trinity-$prefix --trimmomatic</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比对到参考基因组</span></span><br><span class="line">ref_genome=xx.fa</span><br><span class="line">trinity_fa=$(find xx/gene_structure_identity/01.Illumina -name &quot;Trinity.fasta&quot;)</span><br><span class="line">cat $trinity_fa &gt; trinity.fa</span><br><span class="line">trinity_fa=trinity.fa</span><br><span class="line">thread=18</span><br><span class="line">prefix=trinity</span><br><span class="line">bsubt -q normalAB -n $thread &quot;minimap2 -uf --split-prefix $prefix -ax splice:hq -t $thread $ref_genome $trinity_fa | samtools sort -@ $thread --output-fmt BAM -o $prefix.minimap2.bam &amp;&amp; samtools index $prefix.minimap2.bam&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-六框翻译"><a href="#3-2-六框翻译" class="headerlink" title="3.2. 六框翻译"></a>3.2. 六框翻译</h3><p>根据blast结果，核对最优匹配对应的无参组装得到的序列，根据位置信息核实<strong>起始密码子位置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 六框翻译确定起始密码子位置 （三代全长数据由于仍存在部分错误碱基，因此不适合进行六框翻译，如果有hifi数据则可以进行）</span></span><br><span class="line">get_fasta.py ref.protein.fa.gz need_check.transid need_check.pep.fa</span><br><span class="line"></span><br><span class="line">ln -s ../02.minimap2/trinity.fa</span><br><span class="line">seqkit translate --frame 6 ../02.minimap2/trinity.fa |sed &#x27;1d&#x27; &gt; trinity.six_trans.pep.fa</span><br><span class="line">makeblastdb -dbtype prot -in trinity.six_trans.pep.fa</span><br><span class="line">bsubt &quot;blastp -db trinity.six_trans.pep.fa -query need_check.pep.fa -out need_check.blast.out -outfmt 6 -evalue 1e-5 -num_threads 5 -max_target_seqs 10&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于数据库文件过大，提取hit序列，方便核对</span></span><br><span class="line">cut -f 2 need_check.blast.out | sort | uniq &gt; need_check.blast.out.transid</span><br><span class="line">get_fasta.py trinity.six_trans.pep.fa need_check.blast.out.transid need_check.blast.out.transid.fa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生物信息学</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>手工矫正</tag>
        <tag>基因注释</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo + GitHub 搭建个人图床工具</title>
    <url>/2021/01/13/picture-storage/</url>
    <content><![CDATA[<p>参考 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">官方教程文档</a> 即可，含有中文教程。</p>
<a id="more"></a>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>终端复用工具tmux使用方法</title>
    <url>/2021/01/13/tmux-usage/</url>
    <content><![CDATA[<h2 id="tmux及其特征"><a href="#tmux及其特征" class="headerlink" title="tmux及其特征"></a>tmux及其特征</h2><ul>
<li>tmux 是终端复用，在一个命令行窗口中不仅可以显示多个Shell的内容，而且可以保持多个互不干扰的会话;</li>
<li>tmux 是linux中一种管理窗口的程序，它提供了一个Session随时存储和恢复的功能。</li>
</ul>
<h2 id="tmux-典型适用场景"><a href="#tmux-典型适用场景" class="headerlink" title="tmux 典型适用场景"></a>tmux 典型适用场景</h2><ol>
<li>通过在<code>tmux</code>中运行远程服务器上的程序，防止它们掉线。<ul>
<li>执行耗时较久的任务，<code>tmux</code>不退出则任务也不会退出。 该方法可以在一定程度上替代<code>nohup commond &amp;</code>；</li>
<li>关闭终端，再次打开时原终端里面的任务进程依然不会中断，终端内标准输入及标准输出信息仍会保留；</li>
<li>tmux可以保留窗口内所有信息，比如常规情况下<code>nohup</code>提交任务退出终端重新进入后，<code>jobs</code>不会显示已提交任务，通过<code>tmux</code>终端复用避免该问题；</li>
</ul>
</li>
<li>允许从多台不同的本地计算机访问远程服务器上运行的程序。<ul>
<li>演示命令输入及输出。一个<code>seccssion</code>可以在多台电脑/多个终端同时登录，不同终端内显示的信息会实时同步。</li>
</ul>
</li>
<li>在一个终端中一起使用多个程序和Shell，类似窗口管理器。<a id="more"></a>

</li>
</ol>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><code>conda install tmux</code></p>
<h2 id="tmux-窗口架构"><a href="#tmux-窗口架构" class="headerlink" title="tmux 窗口架构"></a>tmux 窗口架构</h2><p>tmux 中有三个重要概念：</p>
<ul>
<li>会话(session): 建立一个 tmux 工作区会话，会话可以长期驻留，重新连接服务器不会丢失，我们只需重新 tmux attach 到之前的工作区就可以恢复会话</li>
<li>窗口(window): 容纳多个窗格</li>
<li>窗格(pane): 可以在窗口中分成多个窗格</li>
</ul>
<p>session为工作区，window相当于你的显示器能看到的所有东西，一个window上可以分成一块块的拼图，也就是各个panes。<br><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/tmux-session-windows-pan-explain.jpg" alt="会话-窗口-窗格间的关系， reference (https://mikolaje.github.io/2019/tmux_guide.html)"></p>
<p>tmux实际工作界面展示：<br><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/tmux-pane-diagram.png" alt="tmux工作界面"></p>
<p>tmux状态栏详解：<br><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/tmux-status-line-diagram.png" alt="tmux状态栏详解"></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新的session</span></span><br><span class="line">tmux new -s &lt;name-of-my-session&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入名为<span class="built_in">test</span>的session</span></span><br><span class="line">tmux attach -t test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有 sessions</span></span><br><span class="line">tmux ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 断开连接</span></span><br><span class="line">ctrl+b d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 窗口相关操作</span></span><br><span class="line">ctrl+b c   # 新建窗口</span><br><span class="line">ctrl+b ,   # 窗口重命名</span><br><span class="line">ctrl+b 0~9 # 切换到指定窗口，鼠标直接点选也可以</span><br><span class="line">ctrl+b &#x27;10 # 切换到10以后的窗口 &#x27;</span><br><span class="line">ctrl+b w   # 列出所有窗口</span><br><span class="line">ctrl+b n   # 后一个窗口</span><br><span class="line">ctrl+b p   # 前一个窗口</span><br><span class="line">ctrl+b f   # 查找窗口</span><br><span class="line">ctrl+b &amp;   # 关闭当前窗口</span><br><span class="line">ctrl+b s   # 保存工作环境，适用于 continuum 插件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 面板操作</span></span><br><span class="line">ctrl+b &quot; # 将当前面板上下分屏&quot;</span><br><span class="line">ctrl+b % # 将当前面板左右分屏</span><br><span class="line">ctrl+b x # 关闭当前分屏</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看终端输出被覆盖的内容</span></span><br><span class="line">ctrl+b [  进入copy模式，可使用 上下键 翻动</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Tmux-配置及常用插件"><a href="#Tmux-配置及常用插件" class="headerlink" title="Tmux 配置及常用插件"></a>Tmux 配置及常用插件</h2><p>编辑文件 <code>~/.tmux.conf</code> 进行插件配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -g mouse on # 启用鼠标功能。滚动查看，复制等</span><br><span class="line">set -g @continuum-restore &#x27;on&#x27; # 启用自动恢复</span><br><span class="line">set -g @continuum-save-interval &#x27;1440&#x27; # save times. 1day</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> List of plugins</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> resurect &amp; continuum 会话定时保存</span></span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tmux-sensible&#x27;</span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27;</span><br><span class="line">set -g @plugin &#x27;tmux-plugins/tmux-continuum&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span></span><br><span class="line">run &#x27;~/.tmux/plugins/tpm/tpm&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/tmux/tmux/wiki/Getting-Started">tmux-Getting-Started</a><br><a href="https://mikolaje.github.io/2019/tmux_guide.html">mikolaje-tmux-guide</a></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>mapman使用简介</title>
    <url>/2021/01/22/mapman-usage/</url>
    <content><![CDATA[<p>本教程主要针对<strong>植物</strong>。</p>
<p>MapMan是专门为植物开发的，其设计目标是促进植物通路（如光合作用，激素代谢，生物胁迫等）的组学数据可视化。<br>MapMan 与 GO，KEGG 等类似，可以提供基因所属的通路信息。 MapMan 对植物研究者更加友好。</p>
<a id="more"></a>

<p><a href="https://www.plabipd.de/portal/mercator4">Mercator4</a>: MapMan注释套件，为所有<strong>高等植物</strong>提供相对高质量的蛋白质注释。该程序为web服务，<em>速度非常快</em>，注释3-4万个基因仅需约 20min。</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="MapMan-下载"><a href="#MapMan-下载" class="headerlink" title="MapMan 下载"></a>MapMan 下载</h3><p>下载前需注册账号，然后在 <a href="https://mapman.gabipd.org/mapman">下载地址</a> 选取对应系统版本应用程序进行下载安装。<br>针对<code>MacOS</code>系统，选取<code>lib</code>文件夹下<code>MapMan_3.6.0RC1.jar</code>双击打开即可进入GUI界面。</p>
<h3 id="Mercator4-注释"><a href="#Mercator4-注释" class="headerlink" title="Mercator4 注释"></a>Mercator4 注释</h3><p>选取<strong>最长转录本</strong>提交到 <a href="https://www.plabipd.de/portal/mercator4">web服务</a> 中，约20min后即可获得注释结果。<br>如果有不符合mercator4定义的fasta规范的序列信息，程序会报错，按照提示将序列提交到 <a href="https://www.plabipd.de/portal/web/guest/mercator-fasta-validator">mercator-fasta-validator</a> 进行序列过滤即可。</p>
<p>注释完成后点击<code>Mercator4 annotation results</code>下载结果文件。 注释结果如图：</p>
<p><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/Mercator4-annotation-result.png" alt="Mercator4-annotation-result"></p>
<p>由于<code>Mercator4</code>会将geneID中的大写字母替换为小写字母，因此需要还原geneID。 这里由于后续的geneID内不含有转录本编号，因此在这里一并去除。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat maizeV4.mapman.results.txt | sed <span class="string">&#x27;s/zm/Zm/g&#x27;</span> | sed <span class="string">&#x27;s/_p[0-9]*//g&#x27;</span> &gt; maizeV4.mapman.results.rename.txt</span><br></pre></td></tr></table></figure>

<h3 id="MapMan-使用"><a href="#MapMan-使用" class="headerlink" title="MapMan 使用"></a>MapMan 使用</h3><ol>
<li><p>添加 <code>Mappings</code><br>在 MapMan 主页面内右键 <code>Mappings</code>，选择 <code>New Mappings</code>，选择 <code>form file</code>，随后选择目标文件即可</p>
</li>
<li><p>添加 <code>Experiments</code><br>在 MapMan 主页面内右键 <code>Experiments</code>，选择 <code>Add Data</code>，选择目标文件双击打开，根据实际情况勾选数据格式，随后点<code>确定</code>即可完成数据导入</p>
<ul>
<li>数据格式为：<br><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/Mapman-upload-sample-data.png" alt="Mapman-upload-sample-data"></li>
<li>MapMan数据格式勾选示例：<br><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/Mapman-upload-sample-data-format-select.png" alt="Mapman-upload-sample-data-format-select"></li>
</ul>
</li>
<li><p>导入 <code>Pathways</code><br>在 <a href="https://mapman.gabipd.org/mapmanstore">mapman网站</a>下载需要的·<code>Pathways</code> 信息，需要下载 <code>image file</code> 和 <code>xml file</code>两个文件，将下载过的文件移入自定义的 Mapman 软件文件夹下，在 <code>Pathways</code> 上右键点击选择 <code>Add Pathways</code>，选择 <code>from file</code>，进入数据存储目录选择 <code>svg/png</code> 格式文件即可完成导入</p>
</li>
<li><p>选择 <code>Pathways</code><br>在感兴趣的 <code>Pathways</code> 上右键点击，这里以 <code>Overview</code> 为例，点击 <code>Choose mapping</code>，选择第一步导入的 <code>Mappings files</code>，随后选择 <code>Show</code></p>
<p><strong>Tips</strong>:<br>如果使用v4版本<code>Mercator4</code>获得的<code>mapping files</code>，在选择<code>Pathways</code>的时候只能选择以<code>X4</code>起始的文件。</p>
</li>
<li><p>呈现基因变化或表达量等信息，由导入的数据本身决定<br>展开第二步导入的<code>Experiments-data</code>信息，选择不同的列即可观察到对应<code>Pathways</code>上会呈现不同颜色的点，这就是最终得到的<strong>结果信息</strong>。</p>
</li>
</ol>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://mapman.gabipd.org/home">MapMan main page</a><br><a href="https://www.sciencedirect.com/science/article/pii/S1674205219300085">MapMan4: A Refined Protein Classification and Annotation Framework Applicable to Multi-Omics Data Analysis</a></p>
]]></content>
      <categories>
        <category>生物信息学</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>基因注释</tag>
      </tags>
  </entry>
  <entry>
    <title>SRA数据下载</title>
    <url>/2021/02/25/SRA-data-download/</url>
    <content><![CDATA[<p>SRA(NCBI/EBI)数据下载方式:</p>
<p><a href="https://sra-explorer.info/#">https://sra-explorer.info/#</a></p>
<a id="more"></a>

<p>由于NCBI数据存储地址更新，导致使用传统的 prefetch / ascp构造下载链接 等方式会出现部分数据不能正常下载的情况。 使用<a href="https://sra-explorer.info/#">上述网址</a>可以直接解析下载链接，然后通过 <code>ascp/wget</code> 等方式下载 <code>sra/fastq</code> 文件即可。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="https://www.jieandze1314.com/post/cnposts/197/">197-也许是最方便的SRA数据下载方式</a><br><a href="https://github.com/ewels/sra-explorer">github源码</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生物信息学</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>linux磁盘挂载与推出</title>
    <url>/2021/02/26/linux-disk-mount/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk <span class="comment"># 查看磁盘是否正确插入，如果正常则会显示 sdb / sdc 等</span></span><br><span class="line">mount /dev/sdc1 /mnt/disk2sdc1 <span class="comment"># 挂载磁盘</span></span><br><span class="line">umount /mnt/disk2sdc1 <span class="comment"># 推出磁盘</span></span><br><span class="line">nohup rsync -avP /mnt/disk3/F20FTSCCWLJ4097_WHEojlR/* ./ &amp; <span class="comment"># 拷贝文件</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>服务器间传输文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从当前目录拷贝到远程路径 </span></span><br><span class="line">/public/home/song/database/ 为当前目录，后面为目标（远程）目录</span><br><span class="line">rsync -rP --rsh=ssh /public/home/song/database/ sunguiling@10.12.253.66:/share/home/sunguiling/ZhiWuNiJing/database/B73/hisat_build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置host后，可使用该命令进行</span></span><br><span class="line">scp local_file slbai:remote_path</span><br><span class="line">scp Ppatens_318_v3.fa  slbai:/home/slbai/database/Physcomitrella_patens/JGI_v3.3/assembly</span><br><span class="line"></span><br><span class="line">配置文件为: /share/home/baishenglong/.ssh/config</span><br><span class="line">配置内容为:</span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">Host slbai</span><br><span class="line">    Hostname 10.12.7.88</span><br><span class="line">    User slbai</span><br><span class="line">    ForwardX11 yes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>物理图谱-遗传图谱共线性</title>
    <url>/2021/03/01/physcial-genetic-map-collinear/</url>
    <content><![CDATA[<p>物理图谱与遗传图谱的共线性常被用来评估基因组组装质量，同源挂载等</p>
<p>可选软件：</p>
<ul>
<li><a href="https://github.com/tanghaibao/jcvi/wiki/ALLMAPS">jcvi-allmaps</a><br>功能包括 1）根据遗传图谱挂载物理图谱；2）拆分嵌合contig；3）估计gap长度；4）计算物理图谱与遗传图谱的共线性 等</li>
<li><a href="https://www.biorxiv.org/content/biorxiv/early/2016/11/29/090415.full.pdf">DMAP</a> 未测试该软件</li>
<li>ggplot2 未测试</li>
</ul>
<a id="more"></a>

<h2 id="1-jcvi-allmaps"><a href="#1-jcvi-allmaps" class="headerlink" title="1. jcvi-allmaps"></a>1. jcvi-allmaps</h2><p>软件安装参照 <a href="https://github.com/tanghaibao/jcvi/wiki/ALLMAPS">官网介绍</a></p>
<p>官网以两个不同的遗传图谱为例，下面以<strong>一个遗传图谱</strong>为例进行介绍。</p>
<h3 id="1-1-准备物理图谱和遗传图谱共线性文件"><a href="#1-1-准备物理图谱和遗传图谱共线性文件" class="headerlink" title="1.1. 准备物理图谱和遗传图谱共线性文件"></a>1.1. 准备物理图谱和遗传图谱共线性文件</h3><p>通常以遗传图谱的<code>marker序列</code>为query序列查找其在参考基因组上的定位，共线性文件格式为：</p>
<ol>
<li>逗号分隔文本文件</li>
<li>前两列为物理位置</li>
<li>后两列为遗传距离</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">chr1D,16791958,1,168.33</span><br><span class="line">chr1D,38579229,1,463.21</span><br><span class="line">chr1D,43710824,1,467.97</span><br><span class="line">chr1D,415454245,1,288.95</span><br><span class="line">chr1D,21308457,1,179.51</span><br><span class="line">chr1D,408248047,1,412.86</span><br><span class="line">chr1D,49745837,1,469.23</span><br><span class="line">chr1D,10956960,1,154.73</span><br><span class="line">chr1D,411733058,1,414.17</span><br></pre></td></tr></table></figure>

<h3 id="1-2-转换共线性文件格式"><a href="#1-2-转换共线性文件格式" class="headerlink" title="1.2. 转换共线性文件格式"></a>1.2. 转换共线性文件格式</h3><p>文件格式转换为 <code>bed</code>，下列命令生成文件 <code>weights.txt</code> 和 <code>out.bed</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/\t/,/g&#x27;</span> phy_gen_maps.csv <span class="comment"># 如果准备文件为制表符分割，需要转换为逗号分隔</span></span><br><span class="line">python -m jcvi.assembly.allmaps merge phy_gen_maps.csv</span><br></pre></td></tr></table></figure>

<h3 id="1-3-生成共线性结果"><a href="#1-3-生成共线性结果" class="headerlink" title="1.3. 生成共线性结果"></a>1.3. 生成共线性结果</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s chrD/chrD.fa ./scaffolds.fasta</span><br><span class="line"><span class="comment"># 如果没有参考基因组序列，可使用下列命令伪造基因组</span></span><br><span class="line">bsubt -q rackB <span class="string">&quot;python -m jcvi.assembly.allmaps fake out.bed -o fake.fa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=~/softwares/allmaps:<span class="variable">$PATH</span> <span class="comment"># concorde  faSize  liftOver 添加到环境变量</span></span><br><span class="line">python -m jcvi.assembly.allmaps path out.bed scaffolds.fasta</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果文件解释：</p>
<blockquote>
<p>JM-2.fasta - reconstructed chromosome sequences<br>JM-2.agp - order and orientations of the scaffolds, which can be used in Genbank submissions<br>JM-2.chain - useful to convert scaffold coordinates to new coordinates, for example, if you annotated gene models using the scaffolds, you can use this file along with liftOver to transfer the genes onto chromosomes. See ALLMAPS: How to lift over gene annotations.</p>
</blockquote>
<p>下图为官网示例的两个遗传图谱的结果</p>
<p><img src="https://camo.githubusercontent.com/e54c3f825f10c50eb47455b9fbe3dec49ca32b3c842a62294ce132d13f698f56/68747470733a2f2f7777772e64726f70626f782e636f6d2f732f77727279666d687738676b736172682f63687232332e706e673f7261773d31" alt="collinear_result"></p>
]]></content>
      <categories>
        <category>生物信息学</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Snakemake流程管理工具非官方不完全使用教程</title>
    <url>/2021/03/16/snakemake-tutorial-chinese/</url>
    <content><![CDATA[<p><a href="https://snakemake.github.io/">Snakemake</a>:一个工作流管理系统，是创建可重现和可扩展的数据分析的工具。基于Python的人类可读语言来描述工作流。可以无需修改工作流程定义，无缝扩展到服务器、群集、网格和云环境。Snakemake工作流程可以根据需要描述所需的软件，该软件将自动部署到任何执行环境中。</p>
<p>常用操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">snakemake -np <span class="comment"># 伪运行，只输出命令，常用于检查流程文件编写是否正确</span></span><br><span class="line">snakemake --dag | dot -Tpdf &gt; dag.pdf <span class="comment"># 生成DAG图</span></span><br><span class="line">nohup snakemake -j 100 --drmaa -s Snakefile --verbose -p &amp; <span class="comment"># 执行流程</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Quick-edit-workflow"><a href="#Quick-edit-workflow" class="headerlink" title="Quick edit workflow"></a>Quick edit workflow</h2><p><a href="https://snakemake.readthedocs.io/en/stable/tutorial/basics.html">Basics: An example workflow</a><br><a href="https://snakemake.readthedocs.io/en/stable/tutorial/advanced.html#summary">Advanced: Decorating the example workflow</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">configfile: <span class="string">&quot;config.yaml&quot;</span></span><br><span class="line"></span><br><span class="line">rule <span class="built_in">all</span>:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;plots/quals.svg&quot;</span></span><br><span class="line"></span><br><span class="line">rule bwa_map:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;data/genome.fa&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> wildcards: config[<span class="string">&quot;samples&quot;</span>][wildcards.sample]</span><br><span class="line">    output:</span><br><span class="line">        temp(<span class="string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span>)</span><br><span class="line">    params:</span><br><span class="line">        rg=<span class="string">r&quot;@RG\tID:&#123;sample&#125;\tSM:&#123;sample&#125;&quot;</span></span><br><span class="line">    log:</span><br><span class="line">        <span class="string">&quot;logs/bwa_mem/&#123;sample&#125;.log&quot;</span></span><br><span class="line">    threads: <span class="number">8</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;(bwa mem -R &#x27;&#123;params.rg&#125;&#x27; -t &#123;threads&#125; &#123;input&#125; | &quot;</span></span><br><span class="line">        <span class="string">&quot;samtools view -Sb - &gt; &#123;output&#125;) 2&gt; &#123;log&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule samtools_sort:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        protected(<span class="string">&quot;sorted_reads/&#123;sample&#125;.bam&quot;</span>)</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;samtools sort -T sorted_reads/&#123;wildcards.sample&#125; &quot;</span></span><br><span class="line">        <span class="string">&quot;-O bam &#123;input&#125; &gt; &#123;output&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule samtools_index:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;sorted_reads/&#123;sample&#125;.bam&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;samtools index &#123;input&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule bcftools_call:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        fa=<span class="string">&quot;data/genome.fa&quot;</span>,</span><br><span class="line">        bam=expand(<span class="string">&quot;sorted_reads/&#123;sample&#125;.bam&quot;</span>, sample=config[<span class="string">&quot;samples&quot;</span>]),</span><br><span class="line">        bai=expand(<span class="string">&quot;sorted_reads/&#123;sample&#125;.bam.bai&quot;</span>, sample=config[<span class="string">&quot;samples&quot;</span>])</span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;calls/all.vcf&quot;</span></span><br><span class="line">    params:</span><br><span class="line">        rate=config[<span class="string">&quot;prior_mutation_rate&quot;</span>]</span><br><span class="line">    log:</span><br><span class="line">        <span class="string">&quot;logs/bcftools_call/&#123;sample&#125;.log&quot;</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;samtools mpileup -g -f &#123;input.fa&#125; &#123;input.bam&#125; | &quot;</span></span><br><span class="line">        <span class="string">&quot;bcftools call -mv -P &#123;params.rate&#125; - &gt; &#123;output&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule plot_quals:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;calls/all.vcf&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;plots/quals.svg&quot;</span></span><br><span class="line">    script:</span><br><span class="line">        <span class="string">&quot;scripts/plot-quals.py&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="文件解析顺序"><a href="#文件解析顺序" class="headerlink" title="文件解析顺序"></a>文件解析顺序</h2><p>Snakemake工作流执行分为三个阶段：</p>
<ol>
<li>起始阶段，解析工作流文件，并对 <code>rule</code> 进行实例化</li>
<li>DAG阶段，填充通配符，将输入文件与输出文件进行匹配，构建所有作业的有向非循环依赖图</li>
<li>调度阶段，执行DAG，根据资源启动任务</li>
</ol>
<h2 id="常用功能-配置"><a href="#常用功能-配置" class="headerlink" title="常用功能/配置"></a>常用功能/配置</h2><h3 id="可用语法"><a href="#可用语法" class="headerlink" title="可用语法"></a>可用语法</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">snakemake    = statement | rule | include | workdir | module | configfile | container</span><br><span class="line">rule         = &quot;rule&quot; (identifier | &quot;&quot;) &quot;:&quot; ruleparams</span><br><span class="line">include      = &quot;include:&quot; stringliteral</span><br><span class="line">workdir      = &quot;workdir:&quot; stringliteral</span><br><span class="line">module       = &quot;module&quot; identifier &quot;:&quot; moduleparams</span><br><span class="line">configfile   = &quot;configfile&quot; &quot;:&quot; stringliteral</span><br><span class="line">userule      = &quot;use&quot; &quot;rule&quot; (identifier | &quot;*&quot;) &quot;from&quot; identifier [&quot;as&quot; identifier] [&quot;with&quot; &quot;:&quot; norunparams]</span><br><span class="line">ni           = NEWLINE INDENT</span><br><span class="line">norunparams  = [ni input] [ni output] [ni params] [ni message] [ni threads] [ni resources] [ni log] [ni conda] [ni container] [ni benchmark] [ni cache]</span><br><span class="line">ruleparams   = norunparams [ni (run | shell | script | notebook)] NEWLINE snakemake</span><br><span class="line">input        = &quot;input&quot; &quot;:&quot; parameter_list</span><br><span class="line">output       = &quot;output&quot; &quot;:&quot; parameter_list</span><br><span class="line">params       = &quot;params&quot; &quot;:&quot; parameter_list</span><br><span class="line">log          = &quot;log&quot; &quot;:&quot; parameter_list</span><br><span class="line">benchmark    = &quot;benchmark&quot; &quot;:&quot; statement</span><br><span class="line">cache        = &quot;cache&quot; &quot;:&quot; bool</span><br><span class="line">message      = &quot;message&quot; &quot;:&quot; stringliteral</span><br><span class="line">threads      = &quot;threads&quot; &quot;:&quot; integer</span><br><span class="line">resources    = &quot;resources&quot; &quot;:&quot; parameter_list</span><br><span class="line">version      = &quot;version&quot; &quot;:&quot; statement</span><br><span class="line">conda        = &quot;conda&quot; &quot;:&quot; stringliteral</span><br><span class="line">container    = &quot;container&quot; &quot;:&quot; stringliteral</span><br><span class="line">run          = &quot;run&quot; &quot;:&quot; ni statement</span><br><span class="line">shell        = &quot;shell&quot; &quot;:&quot; stringliteral</span><br><span class="line">script       = &quot;script&quot; &quot;:&quot; stringliteral</span><br><span class="line">notebook     = &quot;notebook&quot; &quot;:&quot; stringliteral</span><br><span class="line">moduleparams = [ni snakefile] [ni metawrapper] [ni config] [ni skipval]</span><br><span class="line">snakefile    = &quot;snakefile&quot; &quot;:&quot; stringliteral</span><br><span class="line">metawrapper  = &quot;meta_wrapper&quot; &quot;:&quot; stringliteral</span><br><span class="line">config       = &quot;config&quot; &quot;:&quot; stringliteral</span><br><span class="line">skipval      = &quot;skip_validation&quot; &quot;:&quot; stringliteral</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件可使用 <a href="https://json.org/">json</a> 或 <a href="https://yaml.org/">yaml</a> 格式, 在 <code>Snakefile</code> 文件顶部添加以下命令引入配置文件信息，并按照字典格式调用信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">configfile: <span class="string">&quot;config.json&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="通配符-Wildcards"><a href="#通配符-Wildcards" class="headerlink" title="通配符-Wildcards"></a>通配符-Wildcards</h3><p>Snakemake使用正则表达式将输出文件与输入文件进行匹配，并确定作业之间的依赖关系。有时，需要使用<strong>限制通配符</strong>解决匹配模糊问题。这可以通过添加描述允许的通配符值集的正则表达式来实现。<br>例如，可以将输出文件·<code>sorted_reads/&#123;sample&#125;.bam</code> 中的通配符样本限制为仅允许字母数字样本名称为 <code>sorted_reads/&#123;sample，[A-Za-z0-9]+&#125;.bam</code>。约束可以按规则定义，也可以使用 <code>wildcard_constraints</code> 关键字进行全局定义，如<a href="https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#snakefiles-wildcards">wildcards</a>所示。 这种机制有助于解决两种歧义。</p>
<ol>
<li>避免模棱两可的规则，可以应用于生成相同输出文件的两个或更多规则。处理歧义规则的其他方式在<a href="https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#snakefiles-ambiguous-rules">处理歧义规则</a>部分中进行了描述。</li>
<li>可以帮助指导基于正则表达式的匹配，以便将通配符分配给文件名的正确部分。考虑输出文件 <code>&#123;sample&#125;.&#123;group&#125;.txt</code>，并假设目标文件是 <code>A.1.normal.txt</code>。 尚不清楚 <code>dataset=&quot;A.1&quot;</code> 和 <code>group=&quot;normal&quot;</code> 还是 <code>dataset=&quot;A&quot;</code> 和 <code>group=&quot;1.normal&quot;</code> 是正确的分配。 在这里，通过 <code>&#123;sample,[A-Z]+&#125;.&#123;group&#125;</code> 约束数据集通配符可以解决此问题。</li>
</ol>
<p>在处理模棱两可的规则时，最佳实践是首先尝试通过使用适当的文件结构来解决歧义，例如，通过将不同步骤的输出文件分隔在不同目录中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">output: <span class="string">&quot;&#123;dataset,\d+&#125;.&#123;group&#125;.txt&quot;</span></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line">rule complex_conversion:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;&#123;dataset&#125;/inputfile&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;&#123;dataset&#125;/file.&#123;group&#125;.txt&quot;</span></span><br><span class="line">    wildcard_constraints:</span><br><span class="line">        dataset=<span class="string">&quot;\d+&quot;</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;somecommand --group &#123;wildcards.group&#125;  &lt; &#123;input&#125;  &gt; &#123;output&#125;&quot;</span></span><br><span class="line"><span class="comment"># method 3 全局变量</span></span><br><span class="line">wildcard_constraints:</span><br><span class="line">    dataset=<span class="string">&quot;\d+&quot;</span></span><br><span class="line">rule a:</span><br><span class="line">    ...</span><br><span class="line">rule b:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="集群资源调用配置"><a href="#集群资源调用配置" class="headerlink" title="集群资源调用配置"></a>集群资源调用配置</h3><p>SGE: <code>snakemake --cluster qsub --jobs 100</code><br><a href="https://www.drmaa.org/">DRMAA</a>: <code>snakemake --drmaa --jobs 100</code><br><a href="https://github.com/snakemake-profiles/doc">lsf</a></p>
<p>不推荐使用 <a href="https://snakemake.readthedocs.io/en/stable/snakefiles/configuration.html#snakefiles-cluster-configuration">Cluster Configuration</a> 文件配置集群资源需求</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__default__&quot;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;n&quot;</span>    : <span class="string">&quot;8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;J&quot;</span>    : <span class="string">&quot;gatk_SV&quot;</span>,</span><br><span class="line">        <span class="string">&quot;e&quot;</span>    : <span class="string">&quot;lsf.err&quot;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>    : <span class="string">&quot;lsf.out&quot;</span>,</span><br><span class="line">        <span class="string">&quot;q&quot;</span>    : <span class="string">&quot;normalAB&quot;</span>,</span><br><span class="line">        <span class="string">&quot;R&quot;</span>    : <span class="string">&quot;\&quot;span[hosts=1]\&quot;&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="string">&quot;fastq_QC&quot;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">&quot;n&quot;</span>    : <span class="string">&quot;8&quot;</span>,</span><br><span class="line">         <span class="string">&quot;J&quot;</span>    : <span class="string">&quot;fastq_QC&quot;</span>,</span><br><span class="line">         <span class="string">&quot;q&quot;</span>    : <span class="string">&quot;normalAB&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;MarkDuplicates&quot;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">&quot;n&quot;</span>    : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;J&quot;</span>    : <span class="string">&quot;MarkDuplicates&quot;</span>,</span><br><span class="line">         <span class="string">&quot;q&quot;</span>    : <span class="string">&quot;rackB&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;filter_VCF&quot;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">&quot;n&quot;</span>    : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;J&quot;</span>    : <span class="string">&quot;filter_VCF&quot;</span>,</span><br><span class="line">         <span class="string">&quot;q&quot;</span>    : <span class="string">&quot;normalAB&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块化规则"><a href="#模块化规则" class="headerlink" title="模块化规则"></a>模块化规则</h3><p>为便于规则复用，可将规则模块化，模块化文件以 <code>smk</code> 结尾，在 <code>Snakefile</code> 文件内使用 <code>include: &quot;path/to/other.smk</code> 方法调用</p>
<h3 id="指定参数，存储日志"><a href="#指定参数，存储日志" class="headerlink" title="指定参数，存储日志"></a>指定参数，存储日志</h3><p>使用 <code>params</code> 将参数信息传递到 <code>shell</code> 或 <code>run</code>内<br>使用 <code>log</code> 将日志信息存储入日志文件内<br>使用 <code>benchmark</code> 将资源消耗信息存储入基准测试文件内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule bwa_map:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;data/genome.fa&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> wildcards: config[<span class="string">&quot;samples&quot;</span>][wildcards.sample]</span><br><span class="line">    output:</span><br><span class="line">        temp(<span class="string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span>)</span><br><span class="line">    params:</span><br><span class="line">        rg=<span class="string">&quot;@RG\tID:&#123;sample&#125;\tSM:&#123;sample&#125;&quot;</span></span><br><span class="line">    log:</span><br><span class="line">        <span class="string">&quot;logs/bwa_mem/&#123;sample&#125;.log&quot;</span></span><br><span class="line">    benchmark:</span><br><span class="line">        <span class="string">&quot;benchmarks/&#123;sample&#125;.bwa.benchmark.txt&quot;</span></span><br><span class="line">    threads: <span class="number">8</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;(bwa mem -R &#x27;&#123;params.rg&#125;&#x27; -t &#123;threads&#125; &#123;input&#125; | &quot;</span></span><br><span class="line">        <span class="string">&quot;samtools view -Sb - &gt; &#123;output&#125;) 2&gt; &#123;log&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合-expand"><a href="#聚合-expand" class="headerlink" title="聚合-expand"></a>聚合-expand</h3><p>对于输入文件是列表的情况，可使用 <code>expand</code> 函数进行聚合</p>
<p>此处的数据集不是通配符，因为由于expand语句，它被Snakemake解析了。 expand函数还允许组合不同的变量</p>
<p>expand函数支持插入其他函数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">expand([&quot;&#123;dataset&#125;/a.&#123;ext&#125;&quot;, &quot;&#123;dataset&#125;/b.&#123;ext&#125;&quot;], zip, dataset=DATASETS, ext=FORMATS)</span><br><span class="line">结果为</span><br><span class="line">[&quot;ds1/a.txt&quot;, &quot;ds1/b.txt&quot;, &quot;ds2/a.csv&quot;, &quot;ds2/b.csv&quot;]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule aggregate:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        expand(<span class="string">&quot;&#123;dataset&#125;/a.txt&quot;</span>, dataset=DATASETS)</span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;aggregated.txt&quot;</span></span><br><span class="line">    shell:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<h3 id="输出指定为目录"><a href="#输出指定为目录" class="headerlink" title="输出指定为目录"></a>输出指定为目录</h3><p><code>version: &gt;5.2.0</code></p>
<p>使用 <code>directory</code> 函数设置输出为目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule NAME:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;path/to/inputfile&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        directory(<span class="string">&quot;path/to/outputdir&quot;</span>)</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;somecommand &#123;input&#125; &#123;output&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="规则依赖"><a href="#规则依赖" class="headerlink" title="规则依赖"></a>规则依赖</h3><p><code>version: &gt;2.4.8</code>支持该功能</p>
<p>针对 <code>rule b</code> 使用 <code>rule a</code> 输出的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule a:</span><br><span class="line">    <span class="built_in">input</span>:  <span class="string">&quot;path/to/input&quot;</span></span><br><span class="line">    output: a = <span class="string">&quot;path/to/output&quot;</span>, b = <span class="string">&quot;path/to/output2&quot;</span></span><br><span class="line">    shell:  ...</span><br><span class="line"></span><br><span class="line">rule b:</span><br><span class="line">    <span class="built_in">input</span>:  rules.a.output.a</span><br><span class="line">    output: <span class="string">&quot;path/to/output/of/b&quot;</span></span><br><span class="line">    shell:  ...</span><br></pre></td></tr></table></figure>

<h3 id="保护文件和临时文件"><a href="#保护文件和临时文件" class="headerlink" title="保护文件和临时文件"></a>保护文件和临时文件</h3><p>将重要结果文件使用 <code>protected</code> 标记，后续对其进行删除和修改需要额外的确认步骤<br>将中间文件使用 <code>temp</code> 标记，其依赖的任务完成后将会自动删除该文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule bwa_map:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;data/genome.fa&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> wildcards: config[<span class="string">&quot;samples&quot;</span>][wildcards.sample]</span><br><span class="line">    output:</span><br><span class="line">        temp(<span class="string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span>)</span><br><span class="line">    params:</span><br><span class="line">        rg=<span class="string">r&quot;@RG\tID:&#123;sample&#125;\tSM:&#123;sample&#125;&quot;</span></span><br><span class="line">    log:</span><br><span class="line">        <span class="string">&quot;logs/bwa_mem/&#123;sample&#125;.log&quot;</span></span><br><span class="line">    threads: <span class="number">8</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;(bwa mem -R &#x27;&#123;params.rg&#125;&#x27; -t &#123;threads&#125; &#123;input&#125; | &quot;</span></span><br><span class="line">        <span class="string">&quot;samtools view -Sb - &gt; &#123;output&#125;) 2&gt; &#123;log&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定线程数和资源"><a href="#指定线程数和资源" class="headerlink" title="指定线程数和资源"></a>指定线程数和资源</h3><ul>
<li>指定线程数</li>
</ul>
<p>默认线程数为 1<br>使用 <code>snakemake --cores 10</code> 设置程序运行可用线程总数，如指定 <code>20</code> 个线程，假设 <code>bwa_map</code> 指定 <code>8</code> 个线程，则只会同时运行 <code>2</code> 个相同任务。 如果 <code>--cores</code> 后不加数值，默认为所有线程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule bwa_map:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;data/genome.fa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data/samples/&#123;sample&#125;.fastq&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;mapped_reads/&#123;sample&#125;.bam&quot;</span></span><br><span class="line">    threads: <span class="number">8</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;bwa mem -t &#123;threads&#125; &#123;input&#125; | samtools view -Sb - &gt; &#123;output&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定资源</li>
</ul>
<p>可以用 <code>mem_mb</code>, <code>disk_mb</code> 指定不同类型的资源使用</p>
<p>默认资源设置为 不受限<br>使用 <code>snakemake --resources mem_mb=100</code> 设置程序运行可用总资源数。可添加 <code>--restart-times n</code> 参数设置使程序失败后自动重新尝试运行 <code>n</code> 次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule:</span><br><span class="line">    <span class="built_in">input</span>:     ...</span><br><span class="line">    output:    ...</span><br><span class="line">    resources:</span><br><span class="line">        mem_mb=<span class="number">100</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用系统-module-等同-linux-module-load-xx"><a href="#使用系统-module-等同-linux-module-load-xx" class="headerlink" title="使用系统 module (等同 linux: module load xx)"></a>使用系统 module (等同 linux: module load xx)</h3><p>如使用<a href="https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html#using-environment-modules">该功能</a>，需添加 <code>--use-envmodules</code> 参数<br>该方法会降低流程的可移植性，谨慎使用。 或者使用 <code>conda</code> 替代（使用<code>conda</code>需确定集群是否支持外部联网）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rule bwa:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        <span class="string">&quot;genome.fa&quot;</span></span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;mapped.bam&quot;</span></span><br><span class="line">    conda:</span><br><span class="line">        <span class="string">&quot;envs/bwa.yaml&quot;</span></span><br><span class="line">    envmodules:</span><br><span class="line">        <span class="string">&quot;bio/bwa/0.7.9&quot;</span>,</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;bwa mem &#123;input&#125; | samtools view -Sbh - &gt; &#123;output&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置工作目录"><a href="#设置工作目录" class="headerlink" title="设置工作目录"></a>设置工作目录</h3><p>默认情况下，Snakemake 涉及到的所有路径均为当前执行路径的相对路径，可以使用 <code>workdir: &quot;path/to/workdir&quot;</code> 指定工作目录，该情况不常用，影响可移植性</p>
<h3 id="生成报告文件"><a href="#生成报告文件" class="headerlink" title="生成报告文件"></a>生成报告文件</h3><p>版本要求: <code>&gt; 5.1</code></p>
<p>生成报告文件方式: 程序运行结束后运行 <code>snakemake --report report.html</code>， 生成部分结果的报告文件 <code>snakemake result1.svg --report report-short.html</code></p>
<p><a href="https://snakemake.readthedocs.io/en/stable/snakefiles/reporting.html">报告文件</a>，包括：运行时间，配置参数，工作流拓扑结构，结果文件等。<a href="https://koesterlab.github.io/resources/report.html">报告示例文件</a></p>
<p>可通过在 <code>rule</code> 中添加 <code>report</code> 标签生成 <code>HTML</code> 格式的报告文件</p>
<p>以下代码示例中的 <code>*rst</code> 文件内存储 报告标题、结果描述 等文本信息<br>使用 <code>category</code> 和 <code>subcategory</code> 对结果进行分组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">report: <span class="string">&quot;report/workflow.rst&quot;</span></span><br><span class="line"></span><br><span class="line">rule <span class="built_in">all</span>:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        [<span class="string">&quot;fig1.svg&quot;</span>, <span class="string">&quot;fig2.png&quot;</span>, <span class="string">&quot;testdir&quot;</span>]</span><br><span class="line"></span><br><span class="line">rule c:</span><br><span class="line">    output:</span><br><span class="line">        <span class="string">&quot;test.&#123;i&#125;.out&quot;</span></span><br><span class="line">    singularity:</span><br><span class="line">        <span class="string">&quot;docker://continuumio/miniconda3:4.4.10&quot;</span></span><br><span class="line">    conda:</span><br><span class="line">        <span class="string">&quot;envs/test.yaml&quot;</span></span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;sleep `shuf -i 1-3 -n 1`; touch &#123;output&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule a:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        expand(<span class="string">&quot;test.&#123;i&#125;.out&quot;</span>, i=<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    output:</span><br><span class="line">        report(<span class="string">&quot;fig1.svg&quot;</span>, caption=<span class="string">&quot;report/fig1.rst&quot;</span>, category=<span class="string">&quot;Step 1&quot;</span>)</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;sleep `shuf -i 1-3 -n 1`; cp data/fig1.svg &#123;output&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule b:</span><br><span class="line">    <span class="built_in">input</span>:</span><br><span class="line">        expand(<span class="string">&quot;&#123;model&#125;.&#123;i&#125;.out&quot;</span>, i=<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    output:</span><br><span class="line">        report(<span class="string">&quot;fig2.png&quot;</span>, caption=<span class="string">&quot;report/fig2.rst&quot;</span>, category=<span class="string">&quot;Step 2&quot;</span>, subcategory=<span class="string">&quot;&#123;model&#125;&quot;</span>)</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;sleep `shuf -i 1-3 -n 1`; cp data/fig2.png &#123;output&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">rule d:</span><br><span class="line">    output:</span><br><span class="line">        report(directory(<span class="string">&quot;testdir&quot;</span>), patterns=[<span class="string">&quot;&#123;name&#125;.txt&quot;</span>], caption=<span class="string">&quot;report/somedata.rst&quot;</span>, category=<span class="string">&quot;Step 3&quot;</span>)</span><br><span class="line">    shell:</span><br><span class="line">        <span class="string">&quot;mkdir &#123;output&#125;; for i in 1 2 3; do echo $i &gt; &#123;output&#125;/$i.txt; done&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="生成测试数据集"><a href="#生成测试数据集" class="headerlink" title="生成测试数据集"></a>生成测试数据集</h3><p>在程序运行结束后，可通过运行 <code>snakemake --generate-unit-tests</code> 自动生成单元测试<br><code>Snakemake</code>被用于为每个规则执行一项代表性工作，并将其输入文件复制到隐藏的文件夹 <code>.tests/unit</code> 中。</p>
<h2 id="工作流目录组织结构"><a href="#工作流目录组织结构" class="headerlink" title="工作流目录组织结构"></a>工作流目录组织结构</h2><p><a href="https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html">推荐目录结构</a>：</p>
<ul>
<li>工作流信息存储在 <code>workflow</code> 文件夹内，主文件 <code>Snakefile</code> 内可引入各子规则，子规则（模块）文件推荐以 <code>smk</code> 后缀结尾</li>
<li>配置信息存储在 <code>config</code> 文件夹内</li>
<li>脚本信息存储在 <code>workflow/scripts</code> 文件夹内，存放工作流需要用到的自定义脚本</li>
<li>笔记信息存储在 <code>workflow/notebooks</code> 文件夹内</li>
<li>环境配置信息存储在 <code>workflow/envs</code> 文件夹内</li>
<li>报告文件信息存储在 <code>workflow/report</code> 文件夹内</li>
<li>所有结果文件均存储在 <code>results</code> 文件夹内，如涉及到查询结果可存储在 <code>resources</code> 文件夹内</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">├── .gitignore</span><br><span class="line">├── README.md</span><br><span class="line">├── LICENSE.md</span><br><span class="line">├── workflow</span><br><span class="line">│   ├── rules</span><br><span class="line">|   │   ├── module1.smk</span><br><span class="line">|   │   └── module2.smk</span><br><span class="line">│   ├── envs</span><br><span class="line">|   │   ├── tool1.yaml</span><br><span class="line">|   │   └── tool2.yaml</span><br><span class="line">│   ├── scripts</span><br><span class="line">|   │   ├── script1.py</span><br><span class="line">|   │   └── script2.R</span><br><span class="line">│   ├── notebooks</span><br><span class="line">|   │   ├── notebook1.py.ipynb</span><br><span class="line">|   │   └── notebook2.r.ipynb</span><br><span class="line">│   ├── report</span><br><span class="line">|   │   ├── plot1.rst</span><br><span class="line">|   │   └── plot2.rst</span><br><span class="line">|   └── Snakefile</span><br><span class="line">├── config</span><br><span class="line">│   ├── config.yaml</span><br><span class="line">│   └── some-sheet.tsv</span><br><span class="line">├── results</span><br><span class="line">└── resources</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生物信息学</category>
        <category>linux进阶</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>开源全平台适配免费密码管理工具-bitwarden</title>
    <url>/2021/04/02/password-manager-tools/</url>
    <content><![CDATA[<p>2021-04-30更新：由于bitwarden官方更新架构，原腾讯云部署项目无法登陆，与技术支持沟通后无法解决。弃用该方法！！！</p>
<p>Ps: bitwarden 官方服务仍可用。</p>
<p>===============</p>
<p>俗话说得好，枪杆子要握在自己手里才放心。最近发现了 <a href="https://bitwarden.com/">bitwarden</a> + <a href="https://cloud.tencent.com/">腾讯云</a> 自建库方案，可以实现较低成本（几乎免费）进行密码管理，且拥有高级会员功能。</p>
<p>个人对密码管理方案有以下几点要求：</p>
<a id="more"></a>

<ol>
<li>安全，稳定（所有软件均<strong>宣称</strong>安全）</li>
<li>可自定义编辑（常用多账号备忘录，Apple 钥匙串、Google Chrome 密码管理、Microsoft Authenticator等大厂开发软件均不具备该功能-2021/04/02。）</li>
<li>配置简洁（PASS 本地+第三方云同步方案）</li>
<li>可迁移性（一键导入导出，基本所有软件均支持）</li>
<li>全平台适用 (ios, chrome extension, macOS. [Windows, Android])</li>
<li>费用较低</li>
</ol>
<p>主流密码管理软件<a href="https://www.softwaretestinghelp.com/best-password-managers/">功能对比</a>：</p>
<p><img src="https://raw.githubusercontent.com/slbai01/picture/main/img/password-manager-tools-compare.jpg" alt="password-manager-tools-compare"></p>
<p>综合以上要求，icloud + <a href="https://1password.com/zh-cn/">1password</a> 成为了首选，1password 为业内大哥，搭配 icloud 白嫖 apple 设备全平台同步，缺点是只能在 ios 端录入和修改信息，并且最近浏览器每次密码填充都会跳出登录账号界面，遂放弃该方案。</p>
<p>近段时间在<strong>阿虚同学</strong>微信公众号内（原文题目：用了4年密码管理神器KeePass，结果一试Bitwarden就回不去了！？）发现 <a href="https://bitwarden.com/">bitwarden</a> + <a href="https://cloud.tencent.com/">腾讯云</a> 方案符合上述各方面要求，配置完之后使用体验不错。</p>
<h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><ol>
<li>注册<a href="https://cloud.tencent.com/">腾讯云</a>账号</li>
<li>注册好之后登录，点击左上角产品 -&gt; 基础 -&gt; 云开发 -&gt; 云开发 CloudBase</li>
<li>点击界面内的<code>免费开通</code>，在弹出的页面，新建一个环境，并点击更多，找到腾讯云提供的 <code>Bitwarden 一键搭建服务</code>，随后根据提示填写资料</li>
<li>新用户在填写资料时可以勾选 <em>开启免费资源</em>，享受白嫖的快乐</li>
<li>云部署约需 5-10 分钟，如果部署失败，或者部署后点击<code>访问</code>无法进入，重新部署几遍即可</li>
<li>注册账号（该账号与 bitwarden 官方账号不同，这个是基于自建服务下的独立账号系统）</li>
<li>进入登陆界面后点击左上角 <strong>齿轮⚙️</strong>，在自托管环境中输入上一步<code>访问</code>中的路径地址，保存后输入上一步注册的账号密码即可。</li>
</ol>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>rshiny使用技巧</title>
    <url>/2021/04/13/rshiny-usage-tips/</url>
    <content><![CDATA[<p>点击阅读前文前, 首页能看到的文章的简短描述</p>
<a id="more"></a>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="结果缓冲条"><a href="#结果缓冲条" class="headerlink" title="结果缓冲条"></a>结果缓冲条</h3><p>适用于文字，图片，表格（网页，waiter支持）等的加载等待界面</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># waiter， One example, other see the document.</span></span><br><span class="line">library(shiny)</span><br><span class="line">library(waiter)</span><br><span class="line"></span><br><span class="line">ui &lt;- fluidPage(</span><br><span class="line">  use_waiter(), </span><br><span class="line">  waiter_show_on_load(html = spin_fading_circles()),</span><br><span class="line">  h3(<span class="string">&quot;Content you will only see after loading screen has disappeared&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">server &lt;- <span class="keyword">function</span>(input, output, session)&#123;</span><br><span class="line">  Sys.sleep(<span class="number">3</span>) <span class="comment"># do something that takes time</span></span><br><span class="line">  waiter_hide()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shinyApp(ui, server)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shinycssloaders</span></span><br><span class="line">plotOutput(<span class="string">&quot;Test&quot;</span>) %&gt;% withSpinner(color=<span class="string">&quot;#0dc5c1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>*Complete: <a href="https://github.com/JohnCoene/waiter">waiter</a>, <a href="https://waiter.john-coene.com/#/waiter">Document</a></p>
<p>*Simply: <a href="https://github.com/daattali/shinycssloaders">shinycssloaders</a></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">在 centos 账户下新建用户 rshiny</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆账户</span></span><br><span class="line">sshpass -p <span class="string">&#x27;r-shiny&#x27;</span> ssh -p 22 rshiny@xx.xx.3.xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理 gcc 动态库报错</span></span><br><span class="line">sudo rm /usr/lib64/libstdc++.so.6</span><br><span class="line">sudo ln -s /home/bionano/miniconda3/lib/libstdc++.so.6 /usr/lib64/libstdc++.so.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 R</span></span><br><span class="line">sudo yum install R</span><br><span class="line"><span class="comment"># 安装 shiny package</span></span><br><span class="line">install.packages(<span class="string">&#x27;shiny&#x27;</span>, repos=<span class="string">&#x27;http://mirror.lzu.edu.cn/CRAN/&#x27;</span>)</span><br><span class="line">install.packages(<span class="string">&#x27;rmarkdown&#x27;</span>, repos=<span class="string">&#x27;http://mirror.lzu.edu.cn/CRAN/&#x27;</span>)</span><br><span class="line">install.packages(<span class="string">&#x27;DT&#x27;</span>, repos=<span class="string">&#x27;http://mirror.lzu.edu.cn/CRAN/&#x27;</span>)</span><br><span class="line">install.packages(<span class="string">&#x27;ggplot2&#x27;</span>, repos=<span class="string">&#x27;http://mirror.lzu.edu.cn/CRAN/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 shiny-server</span></span><br><span class="line">wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.12.933-x86_64.rpm</span><br><span class="line">sudo yum install --nogpgcheck shiny-server-1.5.12.933-x86_64.rpm</span><br><span class="line"><span class="comment"># Created symlink from /etc/systemd/system/multi-user.target.wants/shiny-server.service to /etc/systemd/system/shiny-server.service. （该步骤自动完成，不需要手动配置）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件地址</span></span><br><span class="line">/srv/shiny-server</span><br><span class="line">/var/<span class="built_in">log</span>/shiny-server.log</span><br><span class="line">/var/<span class="built_in">log</span>/shiny-server/*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start shiny-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件地址</span></span><br><span class="line">sudo vi /etc/shiny-server/shiny-server.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错 An error has occurred The application failed to start. The application exited during initialization.</span></span><br><span class="line"><span class="comment"># 该情况可以打开 shiny 网页，但是不能访问 app</span></span><br><span class="line"><span class="comment"># https://github.com/rstudio/shiny-server/issues/153</span></span><br><span class="line">解决方案： </span><br><span class="line">  I did the following to get it running:</span><br><span class="line">  sudo gedit /etc/shiny-server/shiny-server.conf and <span class="keyword">then</span> changed run_as shiny to run_as username <span class="built_in">which</span> <span class="keyword">in</span> my <span class="keyword">case</span> is run_as agarwalnaimish.</span><br><span class="line">  sudo ufw allow 3838/tcp</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>常用软件需要的内存及运行时间</title>
    <url>/2021/06/02/software-require-memory-runtime/</url>
    <content><![CDATA[<p>列举常用生物信息学软件运行所需配置及时间。以下软件均在 <strong>植物逆境2020超算</strong> 测试运行。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>Main Command</th>
<th>Suggest Queue</th>
<th>Genome Size</th>
<th>Max Memory</th>
<th>Run time</th>
<th>CPU time</th>
<th>Use threads</th>
<th>Test Date</th>
<th>Command line</th>
</tr>
</thead>
<tbody><tr>
<td><em>Genome Index</em></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>bwa index</td>
<td>normalAB</td>
<td>wheat: 16 GB</td>
<td>20832 MB</td>
<td>21219 sec.</td>
<td>21139.65 sec.</td>
<td>1</td>
<td>2021-04-23</td>
<td>1</td>
</tr>
<tr>
<td>bwa-mem2 index</td>
<td>fatA</td>
<td>wheat: 16 GB</td>
<td>332993 MB</td>
<td>6980 sec.</td>
<td>7107.20 sec.</td>
<td>1</td>
<td>2021-04-23</td>
<td>2</td>
</tr>
<tr>
<td>gmap_build</td>
<td>normalAB</td>
<td>wheat: 16 GB</td>
<td>23562 MB</td>
<td>5625 sec.</td>
<td>5885.13 sec.</td>
<td>38</td>
<td>2021-04-29</td>
<td>3</td>
</tr>
<tr>
<td>picard index</td>
<td>normalAB</td>
<td>wheat: 16 GB</td>
<td>10554 MB</td>
<td>119 sec.</td>
<td>275.60 sec.</td>
<td>1</td>
<td>2021-04-23</td>
<td>4</td>
</tr>
<tr>
<td>STAR index</td>
<td>fatA</td>
<td>wheat: 16 GB</td>
<td>376483 MB</td>
<td>2 h</td>
<td>56863.63 sec.</td>
<td>10</td>
<td>2019-03-18</td>
<td>5 *</td>
</tr>
<tr>
<td>hisat2-build</td>
<td>fatA</td>
<td>wheat: 16 GB</td>
<td>1411660 MB</td>
<td>17 h</td>
<td>97269.76 sec.</td>
<td>20</td>
<td>2017-12-23</td>
<td>6 *</td>
</tr>
<tr>
<td>cellranger mkref</td>
<td>normalAB</td>
<td>maize: 2 GB</td>
<td>38352 MB</td>
<td>4702 sec.</td>
<td>4819.96 sec.</td>
<td>1</td>
<td>2021-04-29</td>
<td>7</td>
</tr>
<tr>
<td>cellranger-atac mkref</td>
<td>fatA</td>
<td>maize: 2 GB</td>
<td>3185 MB</td>
<td>2121 sec.</td>
<td>2111.98 sec.</td>
<td>1</td>
<td>2021-04-30</td>
<td>8</td>
</tr>
<tr>
<td><em>Others</em></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>orthofinder</td>
<td>normalB</td>
<td>-</td>
<td>5798 MB</td>
<td>18904 sec.</td>
<td>155407.98 sec.</td>
<td>16</td>
<td>2020-08-12</td>
<td>9</td>
</tr>
</tbody></table>
<h2 id="command-line"><a href="#command-line" class="headerlink" title="command line"></a>command line</h2><ol>
<li><code>bwa index -p 161010_Chinese_Spring_v1.0_pseudomolecules.fasta 161010_Chinese_Spring_v1.0_pseudomolecules.fasta</code></li>
<li><code>bwa-mem2 index -p 161010_Chinese_Spring_v1.0_pseudomolecules.fasta 161010_Chinese_Spring_v1.0_pseudomolecules.fasta</code></li>
<li><code>~/.conda/envs/py2/bin/gmap_build -d 161010_Chinese_Spring_v1.0_pseudomolecules.fasta -D ./index 161010_Chinese_Spring_v1.0_pseudomolecules.fasta -t 38</code></li>
<li><code>gatk CreateSequenceDictionary R=161010_Chinese_Spring_v1.0_pseudomolecules.fasta</code></li>
<li><code>/share/home/baishenglong/programs/STAR-2.5.2b/bin/Linux_x86_64/STAR --runMode genomeGenerate --runThreadN 10 --limitGenomeGenerateRAM 1000000000000 --genomeDir /share/home/baishenglong/database/Triticum_aestivum/iwgsc_refseqv1.0/iwgsc_refseqv1.0_all_chromosomes --genomeFastaFiles 161010_Chinese_Spring_v1.0_pseudomolecules.fasta</code></li>
<li><code>/share/home/baishenglong/programs/hisat2-2.0.5/hisat2-build -p 20 --ss iwgsc_refseqv1.0_HighConf_2017Mar13.ss --exon iwgsc_refseqv1.0_HighConf_2017Mar13.exon /share/home/baishenglong/database/Wheat_IWGSC_WGA_v1.0_pseudomolecules/161010_Chinese_Spring_v1.0_pseudomolecules.fasta 161010_Chinese_Spring_v1.0_pseudomolecules.fasta</code></li>
<li><code>cellranger mkref --genome=maize-B73-v4_genome --fasta=reference.genome.fa --genes=reference.filtered.gtf --memgb=32</code></li>
<li><code>cellranger-atac mkref maize-B73-v4_genome-atac --config maize-B73-v4-atac.config</code></li>
<li><code>orthofinder -f ./ -t 16</code></li>
</ol>
]]></content>
      <categories>
        <category>生物信息学</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/04/13/%E6%9F%A5%E8%AF%A2%E5%8C%BA%E9%97%B4%E5%86%85%E5%9F%BA%E5%9B%A0%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="查询区间内基因信息"><a href="#查询区间内基因信息" class="headerlink" title="查询区间内基因信息"></a>查询区间内基因信息</h1><h2 id="1-获取对应基因组位置信息"><a href="#1-获取对应基因组位置信息" class="headerlink" title="1. 获取对应基因组位置信息"></a>1. 获取对应基因组位置信息</h2><p>如查询 AX-110604864, AX-111546862 位点内基因信息。</p>
<p>根据 55K 芯片信息，获取序列信息 (对于多态位点，任选其一)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># group1</span><br><span class="line">&gt;AX-110604864</span><br><span class="line">CAAGGTCCCATTTAGCTAGTTGCCGAGGTAAGCTCCGTGGATGACAGCTTCTTCTTGTCATGTGGCGAGCC</span><br><span class="line">&gt;AX-111546862</span><br><span class="line">TTTTACTACACTAAGGTGTTTTTATGTAATAGAGCACCGGCTCCGACGCTACTCTACTGCTCTTTGTGCGT</span><br><span class="line"></span><br><span class="line"># group2</span><br><span class="line">&gt;AX-110177050</span><br><span class="line">CTGACGGATCTGGGGCGATGGATGGAGAAGCTGGACATACATGGTGGCAACAACATCGTCTCCCATGCAGG</span><br><span class="line">&gt;AX-109104358</span><br><span class="line">TGGTGCAAGCGACATCGTAGCCCGGGTGGGGATCAAAACTGCATGATTTTCCCGTAGCTTTGTCGGTGAGC</span><br></pre></td></tr></table></figure>

<p>在<a href="http://10.12.2.249:4567/">节节麦基因组网站</a>进行blastn查询</p>
<p>查询结果为：</p>
<table>
<thead>
<tr>
<th>ArrayID</th>
<th>AX-110604864</th>
<th>AX-111546862</th>
<th>-</th>
<th>AX-110177050</th>
<th>AX-109104358</th>
</tr>
</thead>
<tbody><tr>
<td>T093</td>
<td>Chr4 4113168</td>
<td>Chr4 3119203</td>
<td>-</td>
<td>Chr3 19255786</td>
<td>Chr3 22041177</td>
</tr>
<tr>
<td>AK58</td>
<td>chr4D 4064411</td>
<td>chr4D 3599881</td>
<td>-</td>
<td>chr3D 17829703</td>
<td>chr3D 20351356</td>
</tr>
</tbody></table>
<h2 id="2-获取区间内基因信息"><a href="#2-获取区间内基因信息" class="headerlink" title="2. 获取区间内基因信息"></a>2. 获取区间内基因信息</h2><p>根据起始位置从 <code>gff</code> 文件内使用 <code>awk</code> 提取基因ID即可<br>如无编程基础，可在<a href="http://10.12.2.249:4567/">节节麦信息提取网站</a>提取基因信息。</p>
]]></content>
  </entry>
  <entry>
    <title>LSF常用命令</title>
    <url>/2021/06/08/LSF-common-use-command-line/</url>
    <content><![CDATA[<h2 id="任务提交"><a href="#任务提交" class="headerlink" title="任务提交"></a>任务提交</h2><ul>
<li>指定任务依赖<ul>
<li>依赖单个job：<code>-w jobid</code></li>
<li>同时依赖多个job：<code>bsub -w &quot;done(226197)&amp;&amp;done(226198)&quot; command-line</code></li>
</ul>
</li>
<li>提交任务便捷别名 <code>alias bsubt=&#39;bsub -q normalB -e lsf.err -o lsf.out -R &quot;span[hosts=1]&quot; &#39;</code></li>
</ul>
<a id="more"></a>

<h2 id="任务挂起与恢复"><a href="#任务挂起与恢复" class="headerlink" title="任务挂起与恢复"></a>任务挂起与恢复</h2><ul>
<li>挂起的运行中的作业将终止计算，但作业进程并不结束</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bstop jobid</span><br><span class="line">bkill -s STOP <span class="comment">#不推荐使用，任务挂起后仍会占用系统资源</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将挂起的作业恢复</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bresume jobid</span><br><span class="line">bkill -s CONT <span class="comment">#不推荐使用，任务挂起后仍会占用系统资源</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不同的挂起状态</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PSUSP    作业在排队中时被挂起。</span><br><span class="line">USUSP    作业在计算过程中时被挂起。</span><br><span class="line">SSUSP    作业被LSF作业调度系统挂起，</span><br></pre></td></tr></table></figure>

<h2 id="终止任务"><a href="#终止任务" class="headerlink" title="终止任务"></a>终止任务</h2><ul>
<li><p>终止所有运行中的任务 <code>bkill 0</code></p>
</li>
<li><p>终止单个任务 <code>bkill jobid</code></p>
</li>
</ul>
<h2 id="修改任务依赖关系"><a href="#修改任务依赖关系" class="headerlink" title="修改任务依赖关系"></a>修改任务依赖关系</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bmod -w 341348 329606</span><br><span class="line"><span class="comment">#Parameters of job &lt;329606&gt; are being changed</span></span><br></pre></td></tr></table></figure>

<h2 id="提交任务到单一节点"><a href="#提交任务到单一节点" class="headerlink" title="提交任务到单一节点"></a>提交任务到单一节点</h2><p><code>-R &quot;span[hosts=1]&quot;</code></p>
<h2 id="修改队列内包含节点信息"><a href="#修改队列内包含节点信息" class="headerlink" title="修改队列内包含节点信息"></a>修改队列内包含节点信息</h2><blockquote>
<p><a href="http://cgm.sjtu.edu.cn/index/pub/courses/2019/omics/OpenLava-taskmanagement-intro20170214v3.pdf">ref. link</a></p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lsb.queues</span><br><span class="line">所在目录：$LSF_TOP/lsbatch/$clustername/configdir</span><br><span class="line">此文件用来配置lsf队列信息。</span><br><span class="line"></span><br><span class="line">若修改上述文件需执行</span><br><span class="line">badmin reconfig</span><br><span class="line">使之生效</span><br></pre></td></tr></table></figure>

<h2 id="提交job-array"><a href="#提交job-array" class="headerlink" title="提交job array"></a>提交job array</h2><blockquote>
<p><a href="https://scicomp.ethz.ch/wiki/Job_arrays">ref. link</a></p>
</blockquote>
<p><a href="https://slbai01.github.io/2020/12/07/LSF-job-array/">LSF作业管理系统提交job array</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example1</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `seq 1 7`; <span class="keyword">do</span> <span class="comment"># 按染色体去冗余</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;grep \&quot;^chr<span class="variable">$&#123;x&#125;</span>D\&quot; *tsv | cut -d &#x27;:&#x27; -f 2 | sort -k2n | uniq &gt; merge.chr<span class="variable">$&#123;x&#125;</span>D_depth0.tsv&quot;</span></span><br><span class="line"><span class="keyword">done</span> &gt; redup.sh</span><br><span class="line">bsub -J <span class="string">&quot;testjob[1-7]&quot;</span> -q rock -n 1 -R <span class="string">&quot;span[hosts=1]&quot;</span> <span class="string">&quot;awk -v jindex=\$LSB_JOBINDEX &#x27;NR==jindex&#x27; redup.sh | bash&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example2</span></span><br><span class="line">module load BamDeal/0.24</span><br><span class="line">bsubt <span class="string">&quot;mkdir split_bam; BamDeal modify bamSplit -l round1.fofn -o split_bam;&quot;</span></span><br><span class="line"><span class="comment"># 更改输入文件格式为数字</span></span><br><span class="line">jobid=0</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `ls split_bam/*`; <span class="keyword">do</span></span><br><span class="line">  jobid=$((<span class="variable">$jobid</span>+<span class="number">1</span>))</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$jobid</span>\t <span class="variable">$x</span>&quot;</span> &gt;&gt; split_bam/correspond.txt</span><br><span class="line">  mv <span class="variable">$x</span> split_bam/<span class="variable">$jobid</span>.bam</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">bsubt -J <span class="string">&quot;index[1-<span class="variable">$jobid</span>]&quot;</span> pbindex split_bam/\<span class="variable">$&#123;LSB_JOBINDEX&#125;</span>.bam</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="python脚本日志信息监控"><a href="#python脚本日志信息监控" class="headerlink" title="python脚本日志信息监控"></a>python脚本日志信息监控</h2><p><code>bpeek jobid</code>实时显示脚本的运行信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG) <span class="comment"># print log to stderr use bpeek command</span></span><br><span class="line">logging.info(<span class="string">&quot;Reading alignment file &#123;&#125; at &#123;&#125;&quot;</span>.<span class="built_in">format</span>(input_align, time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) ))</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://www.racf.bnl.gov/docs/sw/lsf/lsfquickref51">main ref.</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux进阶</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>作业管理系统</tag>
        <tag>LSF</tag>
      </tags>
  </entry>
  <entry>
    <title>software-management-Environment_Modules.md</title>
    <url>/2021/12/07/software-management-Environment-Modules/</url>
    <content><![CDATA[<p><code>module</code>是一款环境变量管理工具，常用语高性能计算平台。通过module进行环境变量的管理，通过module avail可查看已安装的软件环境。</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">module <span class="built_in">help</span>       <span class="comment"># 显示帮助信息</span></span><br><span class="line">module avail      <span class="comment"># 显示已经安装的软件环境</span></span><br><span class="line">module load       <span class="comment"># 导入相应的软件环境</span></span><br><span class="line">module unload     <span class="comment"># 删除相应的软件环境</span></span><br><span class="line">module list       <span class="comment"># 列出已经导入的软件环境</span></span><br><span class="line">module purge      <span class="comment"># 清除所有已经导入的软件环境</span></span><br><span class="line">module switch [mod1] mod2 <span class="comment"># 删除mod1并导入mod2</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>注 : 建议不要同时module load 多个软件，因为不同软件间可能是有冲突的。比较好的方式是module load 一个或一组相互依赖的软件，软件运行完后运行module purge清除导入的环境，然后再导入另外一个或一组相互依赖的软件。</p>
<h2 id="编写自己的modulefile"><a href="#编写自己的modulefile" class="headerlink" title="编写自己的modulefile"></a>编写自己的modulefile</h2><p>部分用户可能会希望将自己的软件环境加到module中进行管理，可以按以下方法操作。</p>
<ul>
<li>Step 1：创建目录来存放modulefile；</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir <span class="variable">$&#123;HOME&#125;</span>/.mymodulefiles   <span class="comment"># 创建目录用于放自己的module file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export MODULEPATH=<span class="variable">$&#123;HOME&#125;</span>/.mymodulefiles:\$MODULEPATH&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile <span class="comment"># 或者退出重新登录即可</span></span><br><span class="line"><span class="comment"># 以下开始编写自己的第一个module file</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;HOME&#125;</span>/.mymodulefiles</span><br><span class="line">vim myfirstmodulefile</span><br></pre></td></tr></table></figure>

<ul>
<li>Step 2：编写modulefile；</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%Module -*- tcl -*-</span></span><br><span class="line"><span class="comment">## This is a module to access something</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 module help 主要内容</span></span><br><span class="line">proc ModulesHelp &#123; &#125; &#123;</span><br><span class="line">        puts stderr <span class="string">&quot;This module sets up access to something&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 module whatis 显示主要内容</span></span><br><span class="line">module-whatis <span class="string">&quot;sets up access to something&quot;</span></span><br><span class="line"><span class="comment"># module 加载前需要模块类</span></span><br><span class="line">prereq module_flag</span><br><span class="line"><span class="comment"># module 加载冲突模块类</span></span><br><span class="line">conflict another_module_flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载其他模块</span></span><br><span class="line">module load gcc</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">setenv       SOMEVERION       0.95</span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">append-path  PATH             /home/[user]/[somedir]/bin</span><br><span class="line">append-path  MANPATH          /home/[user]/[somedir]/man</span><br><span class="line">append-path  LD_LIBRARY_PATH  /home/[user]/[somedir]/lib</span><br></pre></td></tr></table></figure>

<p>编写好后执行module avail即可查看到刚刚写好的modulefile了</p>
<ul>
<li>modulefile常见语法;</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>           <span class="comment"># 设置modulefile内部的变量</span></span><br><span class="line">setenv        <span class="comment"># 设置环境变量</span></span><br><span class="line">prepend-path  <span class="comment"># 效果类似于export PATH=xxx:$PATH</span></span><br><span class="line">append-path   <span class="comment"># 效果类似export PATH=$PATH:xxx</span></span><br></pre></td></tr></table></figure>

<ul>
<li>module 常用目录结构</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── cmake</span><br><span class="line">│   └── 3.8.0</span><br><span class="line">├── compiler</span><br><span class="line">│   └── intel</span><br><span class="line">│       └── 2018.1.163</span><br><span class="line">└── mpi</span><br><span class="line">    ├── gnu</span><br><span class="line">    │   ├── mpich2</span><br><span class="line">    │   │   └── 3.2.1</span><br><span class="line">    │   └── openmpi</span><br><span class="line">    │       └── 3.1.3</span><br><span class="line">    ├── intel</span><br><span class="line">    │   ├── intel_mpi</span><br><span class="line">    │   │   └── 2018.1.163</span><br><span class="line">    │   ├── mpich2</span><br><span class="line">    │   └── openmpi</span><br><span class="line">    │       └── 3.1.3</span><br><span class="line">    └── mpich2</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hpc.pku.edu.cn/_book/guide/soft_env/module.html">hpc_pku</a><br><a href="https://zhuanlan.zhihu.com/p/50725572">https://zhuanlan.zhihu.com/p/50725572</a></p>
]]></content>
      <categories>
        <category>linux进阶</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
</search>
